# Vectors
# Create the following vectors:
pattern <- c(4, 6, 3)
vector <- rep(pattern, times = 11)
vector
help(rep)
vector <- rep(pattern, times = 10)
vector
c(vector, 4)
vector <- c(vector, 4)
vector <- c(rep(4, 10), rep(6, 20), rep(3, 30))
vector
pattern <- c(4, 6, 3)
vector <- rep(pattern, times = 10)
vector <- c(vector, 4)
vector_2 <- c(rep(4, 10), rep(6, 20), rep(3, 30))
nums = c(5, 8, 3, 2, 7, 4) + c(1, 2, 3)
# 6, 10, 6, 3, 9, 7
nums[c(2:4)]
# b
nums = c(5, 8, 3, 2, 7, 4) - c(3, 0, 1)
# 2, 8, 2, -1, 7, 3
nums[-c(2:4)]
# c
nums = c(3, 1, 5, 4) + c(2)
# 5, 3, 7, 6
nums[c(1,3)]
length(nums)
# d
nums = c(9,7,6,2,8)
length(nums)
nums[length(nums)]
rbind(c(11,12,13,14,15),
c(21,22,23,24,25),
c(31,32,33,34,35),
c(41,42,43,44,45),
c(51,52,53,54,55))
m[, -c(2, 4)]
m <- rbind(c(11,12,13,14,15),
c(21,22,23,24,25),
c(31,32,33,34,35),
c(41,42,43,44,45),
c(51,52,53,54,55))
m[3:5, 1:2]
m[, -c(2, 4)]
m[substring(as.character(m[,1]), 2, 2) %% 2 == 0,]
m[substr(as.character(m[,1]), 2, 2) %% 2 == 0,]
sub_mat3 <- m[as.integer(substr(as.character(m[, 1]), 1, 1)) %% 2 == 0, ]
sub_mat3
m[, 1]
as.character(m[, 1])
help(substr)
substr(as.character(m[, 1]), 1, 2)
substr(as.character(m[, 1]), 1, 1)
names(my.list)
my.list <- list(b=3,a="bob",c=c(1,2,3),f=TRUE,e=c("x","y","z"),d=37)
names(my.list)
names_sorted <- sort(names(my.list))
my.list[names_sorted]
sort(names(my.list))
factor(c("A", "C", "B", "B", "D", "A"))
my_list
# 2. Create a list with the factor named grades made from the vector c(“A”,“C”,“B”,“B”,“D”,“A”); the
# vector named nums identical to c(3,2.1,3.3,4,1.5,4.9). Then do the following:
my_list <- list(grades = factor(c("A", "C", "B", "B", "D", "A")), nums = c(3, 2.1, 3.3, 4, 1.5, 4.9))
my_list
# a. Write R code to display the elements of grades that correspond to elements of nums that are greater
# than or equal to 3.
my.list$grades[my.list$nums >= 3]
my.list$nums >= 3
my_list
my_list$nums >= 3
my_list$grades[my_list$nums >= 3]
days
my_list$days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
my_list
factor(c('M', 'F', 'M', 'M', 'F', 'M'), levels = c("F", "M"))
# create the data frame
person <- c('Stan', 'Francine', 'Stee', 'Roger', 'Abigail', 'Klaus')
sex <- factor(c('M', 'F', 'M', 'M', 'F', 'M'), levels = c("F", "M"))
funny <- factor(c('High', 'Med', 'Low', 'High', 'High', 'Med'), levels = c("Low", "Med", "High"))
person
sex
dframe <- data.frame(person, sex, funny)
View(dframe)
age <- c(41, 41, 15, 1600, 21, 60)
dframe$age <- age
# c. Find the mean age with including and excluding Roger.
print(mean(dframe$age))
print(mean(dframe[dframe$person != "Roger", ]$age))
age_wo_roger <- dframe[dframe$person != "Roger", ]$age
print(mean(age_wo_roger))
print(sd(dframe$age))
print(sd(age_wo_roger))
dframe$funny == "High"
which(dframe$funny == "High")
dframe[dframe$funny == "High", ]
for (i in seq(1, 10, by = 0.5)) {
if (i %% 2 != 0) {
print(i)
}
}
for (i in seq(1, 10, by = 0.5)) {
if (i %% 1 == 0 && i %% 2 != 0) {
print(i)
}
}
for (i in vec) {
if (i %% 2 != 0 && i %% 3 == 0) {
print(i)
}
}
vec <- seq(1, 10, by = 0.5)
for (i in vec) {
if (i %% 1 == 0 && i %% 2 != 0) {
print(i)
}
}
for (i in vec) {
if (i %% 2 != 0 && i %% 3 == 0) {
print(i)
}
}
set.seed(123)
for (i in 1:30) {
coin <- sample(c("heads", "tails", "on edge"), size = 1)
if (coin == "heads") {
print("It will be sunny")
} else if (coin == "tails") {
print("It will be cloudy")
} else {
print("There will be a blizzard")
}
}
set.seed(123)
for (i in 1:30) {
coin <- sample(c("heads", "tails", "on edge"), size = 1)
if (coin == "heads") {
print("It will be sunny")
} else if (coin == "tails") {
print("It will be cloudy")
} else {
print("There will be a blizzard")
}
}
coin <- c('Heads', 'Tails', 'Edge') # the coin and possible outcomes
set.seed(1257)
coin_flips <- sample(coin, size = 4, replace = TRUE)
for (i in coin_flips) {
if (i == "heads") {
print("It will be sunny")
} else if (i == "tails") {
print("It will be cloudy")
} else {
print("There will be a blizzard")
}
}
set.seed(1257)
coin_flips <- sample(coin, size = 30, replace = TRUE)
for (i in coin_flips) {
if (i == "heads") {
print("It will be sunny")
} else if (i == "tails") {
print("It will be cloudy")
} else {
print("There will be a blizzard")
}
}
coin_flips
coin <- c('Heads', 'Tails', 'Edge') # the coin and possible outcomes
set.seed(1257)
coin_flips <- sample(coin, size = 30, replace = TRUE)
for (i in coin_flips) {
if (i == "Heads") {
print("It will be sunny")
} else if (i == "Tails") {
print("It will be cloudy")
} else {
print("There will be a blizzard")
}
}
set.seed(1257)
coin_flips <- sample(coin, size = 30, replace = TRUE)
for (i in coin_flips) {
if (i == "Heads") {
print("It will be sunny")
} else if (i == "Tails") {
print("It will be cloudy")
} else {
print("There will be a blizzard")
}
}
U <- function(n) {
if (n%%3 == 0) {
7*n + 3
} else if (n%%3 == 1) {
(7*n + 2)/3
} else {
(n - 2)/3
}
}
U(9)
U(8)
U(7)
marbles.probability <- function(r, b, n, x) {
# Calculate the total number of ways to select n marbles from the jar
total <- choose(r + b, n)
# Calculate the number of ways to select x red marbles from the r red marbles
red <- choose(r, x)
# Calculate the number of ways to select (n - x) blue marbles from the b blue marbles
blue <- choose(b, n - x)
# Calculate the probability of selecting exactly x red marbles and (n - x) blue marbles
prob <- (red * blue) / total
# Return the result
return(prob)
}
marbles.probability(8,9,5,2)
marbles.probability <- function(r, b, n, x) {
total <- choose(r + b, n)
red <- choose(r, x)
blue <- choose(b, n - x)
(red * blue) / total
}
marbles.probability(8,9,5,2)
help(choose)
marbles.probability <- function(r, b, n, x) {
total <- combn(r + b, n)
red <- combn(r, x)
blue <- combn(b, n - x)
(red * blue) / total
}
marbles.probability(8,9,5,2)
blue
marbles.probability <- function(r, b, n, x) {
total <- combn(r + b, n)
red <- combn(r, x)
blue <- combn(b, n - x)
print(red)
(red * blue) / total
}
marbles.probability(8,9,5,2)
marbles.probability <- function(r, b, n, x) {
total <- choose(r + b, n)
red <- choose(r, x)
blue <- choose(b, n - x)
(red * blue) / total
}
marbles.probability(8,9,5,2)
